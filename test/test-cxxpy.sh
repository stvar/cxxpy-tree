#!/bin/bash

# Copyright (C) 2016, 2017, 2021  Stefan Vargyas
# 
# This file is part of C++Py-Tree.
# 
# C++Py-Tree is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# C++Py-Tree is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with C++Py-Tree.  If not, see <http://www.gnu.org/licenses/>.

#
# File generated by a command like:
# $ gen-test -T cxxpy
#

[[ "$1" =~ ^-u[0-9]+$ ]] &&
u="${1:2}" ||
u=""

diff -u$u -L cxxpy.old <(echo \
'$ cd ../src/tree
$ export LD_LIBRARY_PATH=.:abc:cxxpy
$ tree() { ./tree -F cxxpy/cxxpy.so "$@"; }
$ tree -- -t
<Node>;
<Ident> : Node @ <char*> [ident];
<Str> : Node @ <char*> [str];
<Expr> : Node;
<PrimaryExpr> : Expr;
<IdentExpr> : PrimaryExpr @ <Ident>* [ident];
<StrExpr> : PrimaryExpr @ <Str>* [str];
<ParenExpr> : PrimaryExpr @ <Expr>* [expr];
<DictExpr> : PrimaryExpr;
<EmptyDictExpr> : DictExpr;
<KeyDatumDictExpr> : DictExpr @ <KeyDatumList>* [key_datums];
<KeyDatum> : Node @ <Expr>* [expr1], <Expr>* [expr2];
<KeyDatumList> : Node @ list<KeyDatum> [list];
<AttrRef> : PrimaryExpr @ <PrimaryExpr>* [expr], <IdentExpr>* [ident];
<CallArg> : Node @ <Expr>* [expr];
<CallArgList> : Node @ list<CallArg> [list];
<CallExpr> : PrimaryExpr;
<EmptyCallExpr> : CallExpr @ <PrimaryExpr>* [expr];
<ArgsCallExpr> : CallExpr @ <PrimaryExpr>* [expr], <CallArgList>* [args];
<OrTest> : Expr @ <Expr>* [expr1], <Expr>* [expr2];
<AndTest> : Expr @ <Expr>* [expr1], <Expr>* [expr2];
<NotTest> : Expr @ <Expr>* [expr];
<Comp> : Node @ <AST::comp_op_t::type_t> [op], <PrimaryExpr>* [prim];
<CompExpr> : Expr @ <PrimaryExpr>* [prim], list<Comp> [comps];
<Stmt> : Node;
<SimpleStmt> : Stmt;
<ExprStmt> : SimpleStmt @ <Expr>* [expr];
<AssertStmt> : SimpleStmt;
<AssertStmt1> : AssertStmt @ <Expr>* [expr1];
<AssertStmt2> : AssertStmt @ <Expr>* [expr1], <Expr>* [expr2];
<Target> : Node;
<IdentTarget> : Target @ <IdentExpr>* [ident];
<AttrRefTarget> : Target @ <AttrRef>* [attr];
<TargetList> : Node @ list<Target> [list];
<AssignStmt> : SimpleStmt @ <TargetList>* [targets], <Expr>* [expr];
<DelStmt> : SimpleStmt @ <TargetList>* [targets];
<ExprList> : Node @ list<Expr> [list];
<PrintStmt> : SimpleStmt @ <ExprList>* [exprs], <bool> [trail_comma];
<SimpleStmtList> : Stmt @ list<SimpleStmt> [list];
<StmtList> : Stmt @ list<Stmt> [list];
<FileInput> : Node @ <StmtList>* [stmts];
<InteractInput> : Node @ <SimpleStmtList>* [stmts];
<EvalInput> : Node @ <Expr>* [expr];
<InputInput> : Node @ <Expr>* [expr];'
) -L cxxpy.new <(
echo '$ cd ../src/tree'
cd ../src/tree 2>&1 ||
echo 'command failed: cd ../src/tree'

echo '$ export LD_LIBRARY_PATH=.:abc:cxxpy'
export LD_LIBRARY_PATH=.:abc:cxxpy 2>&1 ||
echo 'command failed: export LD_LIBRARY_PATH=.:abc:cxxpy'

echo '$ tree() { ./tree -F cxxpy/cxxpy.so "$@"; }'
tree() { ./tree -F cxxpy/cxxpy.so "$@"; } 2>&1 ||
echo 'command failed: tree() { ./tree -F cxxpy/cxxpy.so "$@"; }'

echo '$ tree -- -t'
tree -- -t 2>&1 ||
echo 'command failed: tree -- -t'
)

